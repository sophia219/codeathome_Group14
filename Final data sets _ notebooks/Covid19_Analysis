{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Covid19_Analysis","provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyN7PsAdvmUF1ajhr3evB/rb"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"Tvm1pROC-w-J","colab_type":"text"},"source":["# **Analysis of Covid19 data set (Germany)**\n","Source of data set: Kaggle, https://www.kaggle.com/headsortails/covid19-tracking-germany\n","\n"]},{"cell_type":"code","metadata":{"id":"u70qHvWbtsgp","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"df8ipkJluCFp","colab_type":"code","outputId":"7987bc8e-9be6-4d36-d4fa-37f6eb9e7823","executionInfo":{"status":"ok","timestamp":1590930465817,"user_tz":-120,"elapsed":3928,"user":{"displayName":"Lisa S.","photoUrl":"","userId":"12387397642456830383"}},"colab":{"base_uri":"https://localhost:8080/","height":206}},"source":["# import data set\n","covid = pd.read_csv('Covid19_Dataset.csv')\n","covid.head()"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>state</th>\n","      <th>county</th>\n","      <th>age_group</th>\n","      <th>gender</th>\n","      <th>date</th>\n","      <th>cases</th>\n","      <th>deaths</th>\n","      <th>recovered</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Baden-Wuerttemberg</td>\n","      <td>LK Alb-Donau-Kreis</td>\n","      <td>00-04</td>\n","      <td>F</td>\n","      <td>2020-03-27</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Baden-Wuerttemberg</td>\n","      <td>LK Alb-Donau-Kreis</td>\n","      <td>00-04</td>\n","      <td>F</td>\n","      <td>2020-03-28</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Baden-Wuerttemberg</td>\n","      <td>LK Alb-Donau-Kreis</td>\n","      <td>00-04</td>\n","      <td>F</td>\n","      <td>2020-04-03</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Baden-Wuerttemberg</td>\n","      <td>LK Alb-Donau-Kreis</td>\n","      <td>00-04</td>\n","      <td>F</td>\n","      <td>2020-05-08</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Baden-Wuerttemberg</td>\n","      <td>LK Alb-Donau-Kreis</td>\n","      <td>05-14</td>\n","      <td>F</td>\n","      <td>2020-03-17</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                state              county age_group  ... cases deaths  recovered\n","0  Baden-Wuerttemberg  LK Alb-Donau-Kreis     00-04  ...     1      0          1\n","1  Baden-Wuerttemberg  LK Alb-Donau-Kreis     00-04  ...     1      0          1\n","2  Baden-Wuerttemberg  LK Alb-Donau-Kreis     00-04  ...     1      0          1\n","3  Baden-Wuerttemberg  LK Alb-Donau-Kreis     00-04  ...     1      0          0\n","4  Baden-Wuerttemberg  LK Alb-Donau-Kreis     05-14  ...     1      0          1\n","\n","[5 rows x 8 columns]"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"KHb8JEknv58g","colab_type":"text"},"source":["**Overall inspection of data set:**"]},{"cell_type":"code","metadata":{"id":"qRkeTXarumCO","colab_type":"code","outputId":"1ddaafd4-c6a5-4004-b64f-54a9f62715e2","executionInfo":{"status":"ok","timestamp":1590930465818,"user_tz":-120,"elapsed":3921,"user":{"displayName":"Lisa S.","photoUrl":"","userId":"12387397642456830383"}},"colab":{"base_uri":"https://localhost:8080/","height":300}},"source":["# get an overview over the dataset\n","covid.describe()"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>cases</th>\n","      <th>deaths</th>\n","      <th>recovered</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>74636.000000</td>\n","      <td>74636.000000</td>\n","      <td>74636.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>2.323852</td>\n","      <td>0.105552</td>\n","      <td>2.043049</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>2.793175</td>\n","      <td>0.412644</td>\n","      <td>2.757691</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>-1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>3.000000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>69.000000</td>\n","      <td>11.000000</td>\n","      <td>68.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              cases        deaths     recovered\n","count  74636.000000  74636.000000  74636.000000\n","mean       2.323852      0.105552      2.043049\n","std        2.793175      0.412644      2.757691\n","min        0.000000      0.000000     -1.000000\n","25%        1.000000      0.000000      1.000000\n","50%        1.000000      0.000000      1.000000\n","75%        3.000000      0.000000      2.000000\n","max       69.000000     11.000000     68.000000"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"EGudBmmUuxEh","colab_type":"code","outputId":"38ec66e7-fcb7-4b12-f65a-aef852d537ed","executionInfo":{"status":"ok","timestamp":1590930465819,"user_tz":-120,"elapsed":3915,"user":{"displayName":"Lisa S.","photoUrl":"","userId":"12387397642456830383"}},"colab":{"base_uri":"https://localhost:8080/","height":181}},"source":["# check variable types\n","covid.dtypes"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["state        object\n","county       object\n","age_group    object\n","gender       object\n","date         object\n","cases         int64\n","deaths        int64\n","recovered     int64\n","dtype: object"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"7X_495jTu4SC","colab_type":"code","outputId":"1005cf5a-f63d-45e0-c75b-9aaac09bdee6","executionInfo":{"status":"ok","timestamp":1590930465819,"user_tz":-120,"elapsed":3909,"user":{"displayName":"Lisa S.","photoUrl":"","userId":"12387397642456830383"}},"colab":{"base_uri":"https://localhost:8080/","height":181}},"source":["# convert 'date' to timeseries\n","covid['date'] = pd.to_datetime(covid['date'])\n","covid.dtypes"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["state                object\n","county               object\n","age_group            object\n","gender               object\n","date         datetime64[ns]\n","cases                 int64\n","deaths                int64\n","recovered             int64\n","dtype: object"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"KY0SgnRPyyQe","colab_type":"code","outputId":"52dd3d67-5250-4258-aa5c-e34671ce7fa5","executionInfo":{"status":"ok","timestamp":1590930465820,"user_tz":-120,"elapsed":3903,"user":{"displayName":"Lisa S.","photoUrl":"","userId":"12387397642456830383"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["# check date range\n","print(min(covid['date']))"],"execution_count":9,"outputs":[{"output_type":"stream","text":["2020-01-28 00:00:00\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"B_SUMb2Wy5Nq","colab_type":"code","outputId":"ecbce3be-6fda-4824-d39b-049a8de85647","executionInfo":{"status":"ok","timestamp":1590930465820,"user_tz":-120,"elapsed":3898,"user":{"displayName":"Lisa S.","photoUrl":"","userId":"12387397642456830383"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["print(max(covid['date']))"],"execution_count":10,"outputs":[{"output_type":"stream","text":["2020-05-14 00:00:00\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5c_B68lqv0mF","colab_type":"code","outputId":"dd578133-e3a6-4938-da53-bc95e3e5b866","executionInfo":{"status":"ok","timestamp":1590930465821,"user_tz":-120,"elapsed":3894,"user":{"displayName":"Lisa S.","photoUrl":"","userId":"12387397642456830383"}},"colab":{"base_uri":"https://localhost:8080/","height":206}},"source":["# set state as index\n","covid.set_index('state')\n","covid.head()"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>state</th>\n","      <th>county</th>\n","      <th>age_group</th>\n","      <th>gender</th>\n","      <th>date</th>\n","      <th>cases</th>\n","      <th>deaths</th>\n","      <th>recovered</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Baden-Wuerttemberg</td>\n","      <td>LK Alb-Donau-Kreis</td>\n","      <td>00-04</td>\n","      <td>F</td>\n","      <td>2020-03-27</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Baden-Wuerttemberg</td>\n","      <td>LK Alb-Donau-Kreis</td>\n","      <td>00-04</td>\n","      <td>F</td>\n","      <td>2020-03-28</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Baden-Wuerttemberg</td>\n","      <td>LK Alb-Donau-Kreis</td>\n","      <td>00-04</td>\n","      <td>F</td>\n","      <td>2020-04-03</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Baden-Wuerttemberg</td>\n","      <td>LK Alb-Donau-Kreis</td>\n","      <td>00-04</td>\n","      <td>F</td>\n","      <td>2020-05-08</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Baden-Wuerttemberg</td>\n","      <td>LK Alb-Donau-Kreis</td>\n","      <td>05-14</td>\n","      <td>F</td>\n","      <td>2020-03-17</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                state              county age_group  ... cases deaths  recovered\n","0  Baden-Wuerttemberg  LK Alb-Donau-Kreis     00-04  ...     1      0          1\n","1  Baden-Wuerttemberg  LK Alb-Donau-Kreis     00-04  ...     1      0          1\n","2  Baden-Wuerttemberg  LK Alb-Donau-Kreis     00-04  ...     1      0          1\n","3  Baden-Wuerttemberg  LK Alb-Donau-Kreis     00-04  ...     1      0          0\n","4  Baden-Wuerttemberg  LK Alb-Donau-Kreis     05-14  ...     1      0          1\n","\n","[5 rows x 8 columns]"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"a_wsohLofybm","colab_type":"code","outputId":"8f080023-6b5c-4c3a-ff51-8b1dc4c81c97","executionInfo":{"status":"ok","timestamp":1590930465822,"user_tz":-120,"elapsed":3886,"user":{"displayName":"Lisa S.","photoUrl":"","userId":"12387397642456830383"}},"colab":{"base_uri":"https://localhost:8080/","height":181}},"source":["# Are there values missing?\n","covid.isna().sum()  "],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["state          0\n","county         0\n","age_group    111\n","gender       320\n","date           0\n","cases          0\n","deaths         0\n","recovered      0\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"wELLu8lPcco9","colab_type":"code","outputId":"4c49cfaa-358d-4299-dddb-7d425fab2471","executionInfo":{"status":"ok","timestamp":1590930465823,"user_tz":-120,"elapsed":3880,"user":{"displayName":"Lisa S.","photoUrl":"","userId":"12387397642456830383"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["# are all observations Covid19 cases (=1)?\n","(covid['cases'] == 0).sum()"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["17"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"egynp3c1dYBd","colab_type":"code","outputId":"f9e6c459-763a-4b32-a13b-48f42ad70c1a","executionInfo":{"status":"ok","timestamp":1590930465823,"user_tz":-120,"elapsed":3873,"user":{"displayName":"Lisa S.","photoUrl":"","userId":"12387397642456830383"}},"colab":{"base_uri":"https://localhost:8080/","height":582}},"source":["# print all observations which are no Covid19 case\n","covid[covid['cases'] == 0]"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>state</th>\n","      <th>county</th>\n","      <th>age_group</th>\n","      <th>gender</th>\n","      <th>date</th>\n","      <th>cases</th>\n","      <th>deaths</th>\n","      <th>recovered</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4084</th>\n","      <td>Baden-Wuerttemberg</td>\n","      <td>LK Karlsruhe</td>\n","      <td>35-59</td>\n","      <td>F</td>\n","      <td>2020-05-01</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4089</th>\n","      <td>Baden-Wuerttemberg</td>\n","      <td>LK Karlsruhe</td>\n","      <td>35-59</td>\n","      <td>M</td>\n","      <td>2020-03-11</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6193</th>\n","      <td>Baden-Wuerttemberg</td>\n","      <td>LK Ostalbkreis</td>\n","      <td>35-59</td>\n","      <td>F</td>\n","      <td>2020-04-18</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7311</th>\n","      <td>Baden-Wuerttemberg</td>\n","      <td>LK Reutlingen</td>\n","      <td>05-14</td>\n","      <td>M</td>\n","      <td>2020-03-30</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7431</th>\n","      <td>Baden-Wuerttemberg</td>\n","      <td>LK Reutlingen</td>\n","      <td>35-59</td>\n","      <td>F</td>\n","      <td>2020-04-10</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7519</th>\n","      <td>Baden-Wuerttemberg</td>\n","      <td>LK Reutlingen</td>\n","      <td>60-79</td>\n","      <td>F</td>\n","      <td>2020-03-18</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7789</th>\n","      <td>Baden-Wuerttemberg</td>\n","      <td>LK Rhein-Neckar-Kreis</td>\n","      <td>15-34</td>\n","      <td>M</td>\n","      <td>2020-05-11</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>8603</th>\n","      <td>Baden-Wuerttemberg</td>\n","      <td>LK Schwarzwald-Baar-Kreis</td>\n","      <td>15-34</td>\n","      <td>F</td>\n","      <td>2020-03-20</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>23457</th>\n","      <td>Bayern</td>\n","      <td>LK Rhoen-Grabfeld</td>\n","      <td>35-59</td>\n","      <td>M</td>\n","      <td>2020-04-28</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>25110</th>\n","      <td>Bayern</td>\n","      <td>LK Straubing-Bogen</td>\n","      <td>35-59</td>\n","      <td>F</td>\n","      <td>2020-04-05</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>30515</th>\n","      <td>Bayern</td>\n","      <td>SK Straubing</td>\n","      <td>35-59</td>\n","      <td>M</td>\n","      <td>2020-04-07</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>33989</th>\n","      <td>Berlin</td>\n","      <td>SK Berlin Treptow-Koepenick</td>\n","      <td>35-59</td>\n","      <td>F</td>\n","      <td>2020-05-09</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>36698</th>\n","      <td>Hamburg</td>\n","      <td>SK Hamburg</td>\n","      <td>35-59</td>\n","      <td>F</td>\n","      <td>2020-05-11</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>36900</th>\n","      <td>Hamburg</td>\n","      <td>SK Hamburg</td>\n","      <td>60-79</td>\n","      <td>M</td>\n","      <td>2020-05-12</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>40937</th>\n","      <td>Hessen</td>\n","      <td>SK Frankfurt am Main</td>\n","      <td>15-34</td>\n","      <td>F</td>\n","      <td>2020-05-05</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>44161</th>\n","      <td>Niedersachsen</td>\n","      <td>LK Harburg</td>\n","      <td>15-34</td>\n","      <td>M</td>\n","      <td>2020-03-21</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>50396</th>\n","      <td>Nordrhein-Westfalen</td>\n","      <td>LK Hoexter</td>\n","      <td>15-34</td>\n","      <td>F</td>\n","      <td>2020-05-10</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                     state                       county  ... deaths recovered\n","4084    Baden-Wuerttemberg                 LK Karlsruhe  ...      0         0\n","4089    Baden-Wuerttemberg                 LK Karlsruhe  ...      0         0\n","6193    Baden-Wuerttemberg               LK Ostalbkreis  ...      0         0\n","7311    Baden-Wuerttemberg                LK Reutlingen  ...      0         0\n","7431    Baden-Wuerttemberg                LK Reutlingen  ...      0         0\n","7519    Baden-Wuerttemberg                LK Reutlingen  ...      0         0\n","7789    Baden-Wuerttemberg        LK Rhein-Neckar-Kreis  ...      0         0\n","8603    Baden-Wuerttemberg    LK Schwarzwald-Baar-Kreis  ...      0         0\n","23457               Bayern            LK Rhoen-Grabfeld  ...      0         0\n","25110               Bayern           LK Straubing-Bogen  ...      0         0\n","30515               Bayern                 SK Straubing  ...      0         0\n","33989               Berlin  SK Berlin Treptow-Koepenick  ...      0         0\n","36698              Hamburg                   SK Hamburg  ...      0         0\n","36900              Hamburg                   SK Hamburg  ...      0         0\n","40937               Hessen         SK Frankfurt am Main  ...      0         0\n","44161        Niedersachsen                   LK Harburg  ...      0         0\n","50396  Nordrhein-Westfalen                   LK Hoexter  ...      0         0\n","\n","[17 rows x 8 columns]"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"ckl1j-RAzX_6","colab_type":"text"},"source":["**Analysis for Germany (all states)**\n"]},{"cell_type":"code","metadata":{"id":"vXU_s7hgijR8","colab_type":"code","outputId":"14b3fa6a-6795-4e2d-f306-acd6818535ce","executionInfo":{"status":"ok","timestamp":1590930465823,"user_tz":-120,"elapsed":3867,"user":{"displayName":"Lisa S.","photoUrl":"","userId":"12387397642456830383"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["# Sum of all cases in Germany in the given time range\n","covid['cases'].sum()"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["173443"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"X9R6PRCIi2yQ","colab_type":"code","outputId":"a074a0ad-ec47-4d78-cec3-8974b4e4f5c7","executionInfo":{"status":"ok","timestamp":1590930465823,"user_tz":-120,"elapsed":3861,"user":{"displayName":"Lisa S.","photoUrl":"","userId":"12387397642456830383"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["# Sum of all deaths in Germany in the given time range\n","covid['deaths'].sum()"],"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["7878"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"code","metadata":{"id":"XXAy10Oji4Ug","colab_type":"code","outputId":"efb266fe-9c0f-4fa9-c0ff-3830afd55e4f","executionInfo":{"status":"ok","timestamp":1590930465824,"user_tz":-120,"elapsed":3857,"user":{"displayName":"Lisa S.","photoUrl":"","userId":"12387397642456830383"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["# Sum of all recovered cases in Germany in the given time range\n","covid['recovered'].sum()"],"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["152485"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"YN5l9OsfWqIQ","colab_type":"code","outputId":"b7d5f4b0-ac3d-4ae2-a2dc-112088e1c676","executionInfo":{"status":"ok","timestamp":1590930465824,"user_tz":-120,"elapsed":3850,"user":{"displayName":"Lisa S.","photoUrl":"","userId":"12387397642456830383"}},"colab":{"base_uri":"https://localhost:8080/","height":390}},"source":["# plot the cases/deaths/recovered in Germany\n","ger = covid.groupby('date').sum()\n","\n","plt.figure(figsize=(12,6))\n","plt.plot(ger.index, ger.cases, label='Cases', color='b')\n","plt.plot(ger.index, ger.deaths, label='Deaths', color='g')\n","plt.plot(ger.index, ger.recovered, label='Recovered', color='r')\n","\n","plt.legend()\n","plt.title(\"Corona in Germany\")\n","plt.grid()\n","plt.show()"],"execution_count":18,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 864x432 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"AkmU1flnXMqe","colab_type":"code","outputId":"eef77df8-3ea8-48f0-e8cf-e3f3e8a1c1c6","executionInfo":{"status":"ok","timestamp":1590930465825,"user_tz":-120,"elapsed":3842,"user":{"displayName":"Lisa S.","photoUrl":"","userId":"12387397642456830383"}},"colab":{"base_uri":"https://localhost:8080/","height":390}},"source":["# plot cumulated cases in Germany\n","ger_cum = np.cumsum(ger)\n","\n","plt.figure(figsize=(12,6))\n","plt.plot(ger_cum.index, ger_cum.cases, label='Cases', color='b')\n","plt.plot(ger_cum.index, ger_cum.deaths, label='Deaths', color='g')\n","plt.plot(ger_cum.index, ger_cum.recovered, label='Recovered', color='r')\n","\n","plt.legend()\n","plt.title(\"Corona in Germany (cumulated)\")\n","plt.grid()\n","plt.show()"],"execution_count":19,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 864x432 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"ZdXSkw0oDqyf","colab_type":"code","outputId":"1b850fd3-130f-4e3d-cb98-05fe1581fd4e","executionInfo":{"status":"ok","timestamp":1590930465826,"user_tz":-120,"elapsed":3837,"user":{"displayName":"Lisa S.","photoUrl":"","userId":"12387397642456830383"}},"colab":{"base_uri":"https://localhost:8080/","height":237}},"source":["age = covid.groupby(['age_group']).sum()\n","age.head()"],"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>cases</th>\n","      <th>deaths</th>\n","      <th>recovered</th>\n","    </tr>\n","    <tr>\n","      <th>age_group</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>00-04</th>\n","      <td>1648</td>\n","      <td>1</td>\n","      <td>1379</td>\n","    </tr>\n","    <tr>\n","      <th>05-14</th>\n","      <td>3860</td>\n","      <td>0</td>\n","      <td>3462</td>\n","    </tr>\n","    <tr>\n","      <th>15-34</th>\n","      <td>43177</td>\n","      <td>16</td>\n","      <td>39766</td>\n","    </tr>\n","    <tr>\n","      <th>35-59</th>\n","      <td>72311</td>\n","      <td>338</td>\n","      <td>67466</td>\n","    </tr>\n","    <tr>\n","      <th>60-79</th>\n","      <td>32704</td>\n","      <td>2490</td>\n","      <td>27788</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["           cases  deaths  recovered\n","age_group                          \n","00-04       1648       1       1379\n","05-14       3860       0       3462\n","15-34      43177      16      39766\n","35-59      72311     338      67466\n","60-79      32704    2490      27788"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"code","metadata":{"id":"nMDeGNxQ50N4","colab_type":"code","outputId":"3ffd6bfc-5201-4761-db4b-62293e8c0c8c","executionInfo":{"status":"ok","timestamp":1590930466237,"user_tz":-120,"elapsed":4244,"user":{"displayName":"Lisa S.","photoUrl":"","userId":"12387397642456830383"}},"colab":{"base_uri":"https://localhost:8080/","height":399}},"source":["# plot differences in age (all states)\n","sns.set(font_scale=1)\n","sns.catplot( x= 'age_group', y = 'cases', kind= 'bar', data = age.reset_index()).set(title = 'Age Differences')"],"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7f8503cab198>"]},"metadata":{"tags":[]},"execution_count":21},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 360x360 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"LAq-cz6jWVAT","colab_type":"code","outputId":"65720c5b-f86a-42b2-d8f6-6652f6f82937","executionInfo":{"status":"ok","timestamp":1590930466238,"user_tz":-120,"elapsed":4240,"user":{"displayName":"Lisa S.","photoUrl":"","userId":"12387397642456830383"}},"colab":{"base_uri":"https://localhost:8080/","height":143}},"source":["# compare gender\n","gender = covid.groupby(['gender']).sum()\n","gender.head()"],"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>cases</th>\n","      <th>deaths</th>\n","      <th>recovered</th>\n","    </tr>\n","    <tr>\n","      <th>gender</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>F</th>\n","      <td>90503</td>\n","      <td>3502</td>\n","      <td>80227</td>\n","    </tr>\n","    <tr>\n","      <th>M</th>\n","      <td>82568</td>\n","      <td>4371</td>\n","      <td>71949</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        cases  deaths  recovered\n","gender                          \n","F       90503    3502      80227\n","M       82568    4371      71949"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"id":"hNwAG2J2WhHO","colab_type":"code","outputId":"80a74f0e-6259-49a4-de7f-a2b3279d274a","executionInfo":{"status":"ok","timestamp":1590930466238,"user_tz":-120,"elapsed":4233,"user":{"displayName":"Lisa S.","photoUrl":"","userId":"12387397642456830383"}},"colab":{"base_uri":"https://localhost:8080/","height":399}},"source":["# plot gender\n","sns.catplot( x= 'gender', y = 'cases', kind= 'bar', data = gender.reset_index()).set(title = 'Gender Differences')"],"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7f8503cab438>"]},"metadata":{"tags":[]},"execution_count":23},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 360x360 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"mtKQ29-kc47R","colab_type":"text"},"source":["**Analysis per state in Germany**"]},{"cell_type":"code","metadata":{"id":"gfuhZBEszKr2","colab_type":"code","outputId":"d287e0d0-2253-4251-dace-e74f5a7afabb","executionInfo":{"status":"ok","timestamp":1590930466239,"user_tz":-120,"elapsed":4227,"user":{"displayName":"Lisa S.","photoUrl":"","userId":"12387397642456830383"}},"colab":{"base_uri":"https://localhost:8080/","height":344}},"source":["# Sum of cases/deaths/recovered for all states\n","state_sum = covid.groupby(['state']).sum()\n","print(state_sum)"],"execution_count":24,"outputs":[{"output_type":"stream","text":["                        cases  deaths  recovered\n","state                                           \n","Baden-Wuerttemberg      33808    1644      29797\n","Bayern                  45251    2273      39698\n","Berlin                   6421     181       5790\n","Brandenburg              3168     149       2769\n","Bremen                   1129      37        805\n","Hamburg                  5015     231       4492\n","Hessen                   9231     432       7972\n","Mecklenburg-Vorpommern    745      20        689\n","Niedersachsen           11088     535       9704\n","Nordrhein-Westfalen     36010    1499      31743\n","Rheinland-Pfalz          6442     216       5847\n","Saarland                 2687     149       2436\n","Sachsen                  5083     195       4450\n","Sachsen-Anhalt           1675      54       1494\n","Schleswig-Holstein       2994     126       2606\n","Thueringen               2696     137       2193\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ZoJ5_SYZ6L1R","colab_type":"code","outputId":"7226283d-9332-4476-86cc-e9b9373498c8","executionInfo":{"status":"ok","timestamp":1590400587320,"user_tz":-120,"elapsed":8300,"user":{"displayName":"Lisa S.","photoUrl":"","userId":"12387397642456830383"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["# visualize state_sum (only cases)\n","sns.set(font_scale=4)\n","sns.catplot(y = 'state', x = 'cases', height=30, aspect=3, kind= 'bar', data=state_sum.reset_index()).set(title = 'State Differences (Cases)')"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7f8500dd1390>"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"code","metadata":{"id":"y91ZeDi7-c49","colab_type":"code","colab":{}},"source":["# visualize state_sum (only deaths)\n","sns.catplot(y = 'state', x = 'deaths',  height=30, aspect=3, kind= 'bar', data=state_sum.reset_index()).set(title = 'State Differences (Deaths)')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7jjCLCOHsWBw","colab_type":"code","colab":{}},"source":["# split data by state\n","bw = covid[covid['state'] == 'Baden-Wuerttemberg']\n","by = covid[covid['state'] == 'Bayern']\n","be = covid[covid['state'] == 'Berlin']\n","bra = covid[covid['state'] == 'Brandenburg']\n","bre = covid[covid['state'] == 'Bremen']\n","ha = covid[covid['state'] == 'Hamburg']\n","he = covid[covid['state'] == 'Hessen']\n","mv = covid[covid['state'] == 'Mecklenburg-Vorpommern']\n","ni = covid[covid['state'] == 'Niedersachsen']\n","nrw = covid[covid['state'] == 'Nordrhein-Westfalen']\n","rp = covid[covid['state'] == 'Rheinland-Pfalz']\n","sar = covid[covid['state'] == 'Saarland']\n","sac = covid[covid['state'] == 'Sachsen']\n","saa = covid[covid['state'] == 'Sachsen-Anhalt']\n","sh = covid[covid['state'] == 'Schleswig-Holstein']\n","th = covid[covid['state'] == 'Thueringen']"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wtLoodVEuD78","colab_type":"code","colab":{}},"source":["# group state data by date\n","bw = bw.groupby('date').sum()\n","by = by.groupby('date').sum()\n","be = be.groupby('date').sum()\n","bra = bra.groupby('date').sum()\n","bre = bre.groupby('date').sum()\n","ha = ha.groupby('date').sum()\n","he = he.groupby('date').sum()\n","mv = mv.groupby('date').sum()\n","ni = ni.groupby('date').sum()\n","nrw = nrw.groupby('date').sum()\n","rp = rp.groupby('date').sum()\n","sar = sar.groupby('date').sum()\n","sac = sac.groupby('date').sum()\n","saa = saa.groupby('date').sum()\n","sh = sh.groupby('date').sum()\n","th = th.groupby('date').sum()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"rhmj0aEUvBTF","colab_type":"code","colab":{}},"source":["# we can now compare the daily cases in a plot\n","# examplarily 5 here\n","sns.set(font_scale=1)\n","plt.figure(figsize=(12,6))\n","plt.plot(bw.index, bw.cases, label='Baden Wuerttemberg', color='b')\n","plt.plot(by.index, by.cases, label='Bayern', color='g')\n","plt.plot(be.index, be.cases, label='Berlin', color='r')\n","plt.plot(bra.index, bra.cases, label='Brandenburg', color='orange')\n","plt.plot(bre.index, bre.cases, label='Bremen', color='pink')\n","\n","\n","plt.legend()\n","plt.title(\"Corona cases in German states\")\n","plt.grid()\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"NHYEC7UBY3l5","colab_type":"code","colab":{}},"source":["# cumultate cases per state\n","bw_cum = np.cumsum(bw)\n","by_cum = np.cumsum(by)\n","be_cum = np.cumsum(be)\n","bra_cum = np.cumsum(bra)\n","bre_cum = np.cumsum(bre)\n","ha_cum = np.cumsum(ha)\n","he_cum = np.cumsum(he)\n","mv_cum = np.cumsum(mv)\n","ni_cum = np.cumsum(ni)\n","nrw_cum = np.cumsum(nrw)\n","rp_cum = np.cumsum(rp)\n","sar_cum = np.cumsum(sar)\n","sac_cum = np.cumsum(sac)\n","saa_cum = np.cumsum(saa)\n","sh_cum = np.cumsum(sh)\n","th_cum = np.cumsum(th)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"balSkz84ZtO9","colab_type":"code","colab":{}},"source":["# plot cumulated cases per state\n","\n","plt.figure(figsize=(12,6))\n","plt.plot(bw_cum.index, bw_cum.cases, label='Baden-Wuerttemberg', color='yellow')\n","plt.plot(by_cum.index, by_cum.cases, label='Bayern', color='g')\n","plt.plot(be_cum.index, be_cum.cases, label='Berlin', color='r')\n","plt.plot(bra_cum.index, bra_cum.cases, label='Brandenburg', color='pink')\n","plt.plot(bre_cum.index, bre_cum.cases, label='Bremen', color='orange')\n","plt.plot(ha_cum.index, ha_cum.cases, label='Hamburg', color='violet')\n","plt.plot(he_cum.index, he_cum.cases, label='Hessen', color='c')\n","plt.plot(mv_cum.index, mv_cum.cases, label='Mecklenburg-Vorpommern', color='m')\n","plt.plot(ni_cum.index, ni_cum.cases, label='Niedersachsen', color='y')\n","plt.plot(nrw_cum.index, nrw_cum.cases, label='NRW', color='purple')\n","plt.plot(rp_cum.index, rp_cum.cases, label='Rheinland-Pfalz', color='teal')\n","plt.plot(sar_cum.index, sar_cum.cases, label='Saarland', color='lightgreen')\n","plt.plot(sac_cum.index, sac_cum.cases, label='Sachsen', color='blue')\n","plt.plot(saa_cum.index, saa_cum.cases, label='Sachsenanhalt', color='peru')\n","plt.plot(sh_cum.index, sh_cum.cases, label='Schleswig-Holstein', color='slategrey')\n","plt.plot(th_cum.index, th_cum.cases, label='Thueringen', color='rosybrown')\n","\n","plt.legend()\n","plt.title(\"Corona cases in German states (cumulated))\")\n","plt.grid()\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MidIBvZJ_Da9","colab_type":"text"},"source":["# **Analysis of Covid19 Cases in Hamburg**"]},{"cell_type":"code","metadata":{"id":"QCABgGjVgHS0","colab_type":"code","colab":{}},"source":["# create data set for Hamburg\n","ham = covid[covid['state'] == 'Hamburg']\n","ham.head()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"U-C5SgAOhmXp","colab_type":"code","colab":{}},"source":["ham.shape"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"OF2Jfq20hCBE","colab_type":"code","colab":{}},"source":["ham.describe()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2TNKNcMkh2LQ","colab_type":"code","colab":{}},"source":["# There are 5015 cases in Hamburg\n","ham['cases'].sum()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3NzTGiwAiDYK","colab_type":"code","colab":{}},"source":["# ...and 231 deaths\n","ham['deaths'].sum()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9Kuz_Xcytfek","colab_type":"code","colab":{}},"source":["# ...and 4492 recovered cases\n","ham['recovered'].sum()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dqDvFkrEhTFc","colab_type":"code","colab":{}},"source":["# ... in the time from 28/02 to 14/05 in the data set\n","print(min(ham['date']))\n","print(max(ham['date']))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eB52ZMAftk9Q","colab_type":"code","colab":{}},"source":["# compare age groups\n","ham_age = ham.groupby(['age_group']).sum()\n","sns.catplot( x= 'age_group', y = 'cases' ,kind= 'bar', data = ham_age.reset_index()).set(title = 'Age Differences')\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"m_dheLbl13If","colab_type":"code","colab":{}},"source":["# compare gender\n","ham_gender = ham.groupby(['gender']).sum()\n","sns.catplot( x= 'gender', y = 'cases', kind= 'bar', data = ham_gender.reset_index()).set(title = 'Gender Differences')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"yJM4Hx2lTTCM","colab_type":"code","colab":{}},"source":["# Are there duplicates in the 'date' column?\n","duplicates = ham['date'].duplicated()\n","print(duplicates)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5TcA2_d3cA8m","colab_type":"code","colab":{}},"source":["# sort ham_tp by 'date'\n","ham.sort_values(by=['date'], inplace=True)\n","ham.head()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"yx8cRKjunWKi","colab_type":"code","colab":{}},"source":["# Group all cases/death/recovered per day\n","ham = ham.groupby('date').sum()\n","ham.head(20)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dk5Nj91TzcqT","colab_type":"code","colab":{}},"source":["# find row number\n","ham.index.get_loc('2020-05-13')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Tzk3lqLKOkjm","colab_type":"code","colab":{}},"source":["# plot new cases/deaths/recovered per day in Hamburg\n","import matplotlib.dates as mdates\n","x = ham.index\n","y = ham.cases\n","\n","plt.figure(figsize=(12,6))\n","plt.plot(ham.index, ham.cases, label='Cases', color='b')\n","plt.plot(ham.index, ham.deaths, label='Deaths', color='g')\n","plt.plot(ham.index, ham.recovered, label='Recovered', color='r')\n","\n","plt.annotate('first restrictions', (mdates.date2num(x[14]), y[14]), xytext=(5, 30), \n","             textcoords='offset points', arrowprops=dict(arrowstyle='-|>', color='black'), horizontalalignment='right', verticalalignment='top')\n","plt.annotate('opening of small shops', (mdates.date2num(x[51]), y[51]), xytext=(15, 40), \n","             textcoords='offset points', arrowprops=dict(arrowstyle='-|>', color='black'), horizontalalignment='left', verticalalignment='top')\n","plt.annotate('opening of restaurants', (mdates.date2num(x[74]), y[74]), xytext=(35, 35), \n","             textcoords='offset points', arrowprops=dict(arrowstyle='-|>', color='black'), horizontalalignment='right', verticalalignment='top')\n","\n","plt.legend()\n","plt.title(\"Corona in Hamburg\")\n","plt.grid()\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"WhQv4hNnp-ku","colab_type":"code","colab":{}},"source":["# cumulate the cases in Hamburg over time\n","ham_cum = np.cumsum(ham)\n","ham_cum.head()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"PCm_FhlVrIc5","colab_type":"code","colab":{}},"source":["# plot cumulated cases/deaths/recovered in Hamburg over time \n","xx = ham_cum.index\n","yy = ham_cum.cases\n","\n","plt.figure(figsize=(12,6))\n","plt.plot(ham_cum.index, ham_cum.cases, label='Cases', color='b')\n","plt.plot(ham_cum.index, ham_cum.deaths, label='Deaths', color='g')\n","plt.plot(ham_cum.index, ham_cum.recovered, label='Recovered', color='r')\n","\n","plt.annotate('first restrictions', (mdates.date2num(xx[14]), yy[14]), xytext=(5, 30), \n","             textcoords='offset points', arrowprops=dict(arrowstyle='-|>', color='black'), horizontalalignment='right', verticalalignment='top')\n","plt.annotate('reopening of small shops', (mdates.date2num(xx[51]), yy[51]), xytext=(20, 30), \n","             textcoords='offset points', arrowprops=dict(arrowstyle='-|>', color='black'), horizontalalignment='right', verticalalignment='top')\n","plt.annotate('opening of restaurants', (mdates.date2num(xx[74]), yy[74]), xytext=(0, -50), \n","             textcoords='offset points', arrowprops=dict(arrowstyle='-|>', color='black'), horizontalalignment='right', verticalalignment='top')\n","\n","plt.legend()\n","plt.title(\"Corona in Hamburg (cumulated)\")\n","plt.grid()\n","plt.show()"],"execution_count":0,"outputs":[]}]}